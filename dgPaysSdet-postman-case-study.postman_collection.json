{
	"info": {
		"_postman_id": "3b3d68f3-3109-4daf-bbac-12118ef55568",
		"name": "dgPaysSdet-postman-case-study",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32026055"
	},
	"item": [
		{
			"name": "baseRequest",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// VARIABLES\r",
							"const BASE_URL = pm.collectionVariables.get('baseUrl');\r",
							"const API_KEY = pm.collectionVariables.get('apiKey');\r",
							"\r",
							"// FUNCTIONS TO USE IN TESTS\r",
							"const functions = {\r",
							"\r",
							"    /**\r",
							"     * This function accepts one argument and generates a random between 0 and the number provided.\r",
							"     * @param max maximum number that the random number can be\r",
							"     */\r",
							"    getRandomInt: (max) => { return Math.floor(Math.random() * max);  },\r",
							"\r",
							"    /**\r",
							"     * This function accepts one argument and sends an API request with specified configurations in the argument\r",
							"     * @param request request configurations\r",
							"     */\r",
							"    sendRequestAsync: (request) => {\r",
							"        return new Promise((resolve, reject) => {\r",
							"            pm.sendRequest(request, (err, res) => {\r",
							"                if (err) {\r",
							"                    reject(err);\r",
							"                } else {\r",
							"                    resolve(res);\r",
							"                }\r",
							"            });\r",
							"        });\r",
							"    },\r",
							"\r",
							"    /**\r",
							"     * This function is asynchronus and accepts three arguments. The function logs the test name, sends the API request, and make assertions. It also logs the test results.\r",
							"     * @param testName the test name that will appear in the results\r",
							"     * @param requestConfig configurations to send API request\r",
							"     * @param assertions this is a callback function to run assertions \r",
							"     */\r",
							"    runAsyncTest: async (testName, requestConfig, assertions) => {\r",
							"        try {\r",
							"            const response = await functions.sendRequestAsync(requestConfig);\r",
							"\r",
							"            console.log(`${testName} - Response:`, response);\r",
							"\r",
							"            await assertions(response);\r",
							"        } catch (error) {\r",
							"            console.error('Error:', error);\r",
							"            pm.expect.fail(`${testName} - Test failed due to an error.`);\r",
							"        }\r",
							"    }\r",
							"\r",
							"}\r",
							"\r",
							"// TESTS\r",
							"\r",
							"//------------------ 1- POST method success check ----------------------------\r",
							"pm.test('1- POST method success check', async () => {\r",
							"    await functions.runAsyncTest('1- POST method success check', {\r",
							"        url: `${BASE_URL}/dgpays`,\r",
							"        method: 'POST',\r",
							"        header: pm.variables.get('header'),\r",
							"        body: pm.variables.get('randomBody')\r",
							"    }, async (response) => {\r",
							"        const responseJson = response.json();\r",
							"        const postId = responseJson.id;\r",
							"        pm.collectionVariables.set('postId', postId);\r",
							"        const responseSchema = pm.variables.get('postSuccessSchema');\r",
							"\r",
							"        pm.expect(response.code).to.equal(200);\r",
							"        pm.expect(response.responseTime).to.be.below(500);\r",
							"        pm.expect(responseJson).to.have.jsonSchema(responseSchema);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"//------------------ 2- POST method error check ----------------------------\r",
							"pm.test('2- POST method error check', async () => {\r",
							"    const requestBody = JSON.parse(pm.request.body);\r",
							"    Object.keys(requestBody).forEach(key => {\r",
							"        requestBody[key] = '';\r",
							"    });\r",
							"    requestBody.name = undefined;\r",
							"    \r",
							"    await functions.runAsyncTest('2- POST method error check', {\r",
							"        url: `${BASE_URL}/dgpays`,\r",
							"        method: 'POST',\r",
							"        header: pm.variables.get('header'),\r",
							"        body: JSON.stringify(requestBody),\r",
							"\r",
							"    },async (response) => { \r",
							"        const responseSchema = pm.variables.get('postErrorSchema');\r",
							"\r",
							"        pm.expect(response.code).to.equal(400);\r",
							"        pm.expect(response.json()).to.have.jsonSchema(responseSchema);\r",
							"\r",
							"        const errorCode = response.json().error.code;\r",
							"        console.log('POST Error Code: ', errorCode);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"//------------------ 3- GET method random check ----------------------------\r",
							"pm.test('3- GET method random check', async () => {\r",
							"    await functions.runAsyncTest('3- GET method random check', {\r",
							"        url: `${BASE_URL}/dgpays`,\r",
							"        method: 'GET',\r",
							"        header: pm.variables.get('header'),\r",
							"    }, async (response) => {\r",
							"        const responseJson = response.json();\r",
							"        const responseLength = responseJson.args.TestData.length;\r",
							"        const randomObject = responseJson.args.TestData[functions.getRandomInt(responseLength)];\r",
							"        const responseSchema = pm.variables.get('getRandomElementSchema');\r",
							"\r",
							"        pm.expect(response.code).to.equal(200);\r",
							"        pm.expect(randomObject).to.have.jsonSchema(responseSchema);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"//------------------ 4- GET method empty list check ----------------------------\r",
							"pm.test('4- GET method empty list check', async () => {\r",
							"    await functions.runAsyncTest('4- GET method empty list check', {\r",
							"        url: `${BASE_URL}/dgpays/empty`,\r",
							"        method: 'GET',\r",
							"        header: pm.variables.get('header'),\r",
							"    }, async (response) => {\r",
							"        const responseJson = response.json();\r",
							"\r",
							"        pm.expect(response.code).to.equal(200);\r",
							"        pm.expect(responseJson).to.be.empty;\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"//------------------ 5- PUT method update ----------------------------\r",
							"pm.test('5- PUT method update', async () => {\r",
							"    await functions.runAsyncTest('5- PUT method update', {\r",
							"        url: `${BASE_URL}/dgpays/` + pm.collectionVariables.get('postId'),\r",
							"        method: 'PUT',\r",
							"        header: pm.variables.get('header'),\r",
							"        body: pm.variables.get('randomBody')\r",
							"    }, async (response) => {\r",
							"        pm.expect(response.code).to.equal(200);\r",
							"        pm.expect(response.text()).to.equal('Basarili');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"//------------------ 6- PUT method error check ----------------------------\r",
							"pm.test('6- PUT method error check', async () => {\r",
							"    await functions.runAsyncTest('6- PUT method error check', {\r",
							"        url: `${BASE_URL}/dgpays/` + pm.variables.get('randomGuid'),\r",
							"        method: 'PUT',\r",
							"        header: {\r",
							"            'Accept': 'application/json',\r",
							"            'x-api-key': API_KEY\r",
							"        },\r",
							"        body: null\r",
							"    }, async (response) => {\r",
							"        const responseSchema = pm.variables.get('putErrorSchema');\r",
							"\r",
							"        pm.expect(response.code).to.equal(405);\r",
							"        pm.expect(response.json()).to.have.jsonSchema(responseSchema);\r",
							"\r",
							"        const errorCode = response.json().error.code;\r",
							"        console.log('PUT Error Code: ', errorCode);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"//------------------ 7- DELETE method success check ----------------------------\r",
							"pm.test('7- DELETE method success check', async () => {\r",
							"    await functions.runAsyncTest('7- DELETE method success check', {\r",
							"        url: `${BASE_URL}/dgpays/` + pm.collectionVariables.get('postId'),\r",
							"        method: 'DELETE',\r",
							"        header: { 'x-api-key': API_KEY },\r",
							"    }, async (response) => {\r",
							"        pm.expect(response.code).to.equal(200);\r",
							"        pm.expect(response.text()).to.equal('Basarili');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"//------------------ 8- DELETE method error check ----------------------------\r",
							"pm.test('8- DELETE method error check', async () => {\r",
							"    await functions.runAsyncTest('8- DELETE method error check', {\r",
							"        url: `${BASE_URL}/dgpays/` + pm.variables.get('randomGuid') + '/error',\r",
							"        method: 'DELETE',\r",
							"        header: {\r",
							"            'Accept': 'application/json',\r",
							"            'x-api-key': API_KEY\r",
							"        },\r",
							"    }, async (response) => {\r",
							"        const responseSchema = pm.variables.get('deleteErrorSchema');\r",
							"\r",
							"        pm.expect(response.code).to.equal(400);\r",
							"        pm.expect(response.json()).to.have.jsonSchema(responseSchema);\r",
							"\r",
							"        const errorCode = response.json().error.code;\r",
							"        console.log('DELETE Error Code: ', errorCode);\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function generateRandomString(length) {\r",
							"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
							"    let result = '';\r",
							"    for (let i = 0; i < length; i++) {\r",
							"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
							"        result += characters.charAt(randomIndex);\r",
							"    }\r",
							"    return result;\r",
							"}\r",
							"\r",
							"function generateRandomDate() {\r",
							"    const startDate = new Date(1946, 0, 1);\r",
							"    const endDate = new Date();\r",
							"    const randomDate = new Date(startDate.getTime() + Math.random() * (endDate.getTime() - startDate.getTime()));\r",
							"    return randomDate.toISOString();\r",
							"}\r",
							"\r",
							"function generateRandomInt(min, max) {\r",
							"    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
							"}\r",
							"\r",
							"pm.variables.set('randomGuid', pm.variables.replaceIn('{{$guid}}'))\r",
							"\r",
							"const randomBody = {\r",
							"  code: generateRandomString(10),\r",
							"  name: generateRandomString(generateRandomInt(3, 6)),\r",
							"  productGroupId: pm.variables.replaceIn('{{$guid}}'),\r",
							"  BankAccount: pm.variables.replaceIn('{{$randomInt}}'),\r",
							"  FinanceSource: generateRandomInt(1, 100).toString(),\r",
							"  BirthDate: generateRandomDate(),\r",
							"  financeType: generateRandomInt(100, 99999).toString(),\r",
							"  dateDifference: pm.variables.replaceIn('{{$randomInt}}'),\r",
							"  isActive: pm.variables.replaceIn('{{$randomBoolean}}')\r",
							"}\r",
							"pm.variables.set('randomBody', randomBody)\r",
							"\r",
							"const API_KEY = pm.collectionVariables.get('apiKey');\r",
							"const header = {\r",
							"    'content-type': 'application/json',\r",
							"    'Accept': 'application/json',\r",
							"    'x-api-key': API_KEY\r",
							"}\r",
							"pm.variables.set('header', header)\r",
							"\r",
							"const postSuccessSchema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"id\": {\r",
							"            \"type\": \"string\"\r",
							"        }\r",
							"    },\r",
							"    \"required\": [\"id\"]\r",
							"};\r",
							"\r",
							"const postErrorSchema = {\r",
							"    type: 'object',\r",
							"    properties: {\r",
							"        error: {\r",
							"            type: 'object',\r",
							"            properties: {\r",
							"                code: { type: 'string' },\r",
							"                message: { type: 'string' },\r",
							"                validationErrors: {\r",
							"                    type: 'array',\r",
							"                    items: {\r",
							"                        type: 'object',\r",
							"                        properties: {\r",
							"                            message: { type: 'string' },\r",
							"                            propertyName: { type: 'string' },\r",
							"                            code: { type: 'string' },\r",
							"                        },\r",
							"                        required: ['message', 'propertyName', 'code'],\r",
							"                    },\r",
							"                },\r",
							"            },\r",
							"            required: ['code', 'message', 'validationErrors'],\r",
							"        },\r",
							"    },\r",
							"    required: ['error'],\r",
							"};\r",
							"\r",
							"const getRandomElementSchema = {\r",
							"    type: 'object',\r",
							"    properties: {\r",
							"        id: { type: 'string' },\r",
							"        code: { type: 'string' },\r",
							"        name: { type: 'string' },\r",
							"        description: { type: 'string' },\r",
							"        productGroupId: { type: 'string' },\r",
							"        fundingSource: { type: 'number' },\r",
							"        proposalValidityDay: { type: 'number' },\r",
							"        profitCalculationMethod: { type: 'number' },\r",
							"        financeType: { type: 'number' },\r",
							"        dateDifference: { type: 'number' },\r",
							"        isActive: { type: 'boolean' },\r",
							"        accountProductId: { type: 'string' }\r",
							"    },\r",
							"    required: ['id', 'code', 'name', 'description', 'productGroupId', 'fundingSource', 'proposalValidityDay', 'profitCalculationMethod', 'financeType', 'dateDifference', 'isActive', 'accountProductId']\r",
							"};\r",
							"\r",
							"const putErrorSchema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"error\": {\r",
							"        \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"            \"code\": {\r",
							"            \"type\": \"string\"\r",
							"            },\r",
							"            \"message\": {\r",
							"            \"type\": \"string\"\r",
							"            }\r",
							"        },\r",
							"        \"required\": [\"code\", \"message\"]\r",
							"        }\r",
							"    },\r",
							"    \"required\": [\"error\"]\r",
							"};\r",
							"\r",
							"const deleteErrorSchema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"error\": {\r",
							"        \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"            \"code\": {\r",
							"            \"type\": \"string\"\r",
							"            },\r",
							"            \"message\": {\r",
							"            \"type\": \"string\"\r",
							"            }\r",
							"        },\r",
							"        \"required\": [\"code\", \"message\"]\r",
							"        }\r",
							"    },\r",
							"    \"required\": [\"error\"]\r",
							"};\r",
							"\r",
							"pm.variables.set('postSuccessSchema', postSuccessSchema);\r",
							"pm.variables.set('postErrorSchema', postErrorSchema);\r",
							"pm.variables.set('getRandomElementSchema', getRandomElementSchema);\r",
							"pm.variables.set('putErrorSchema', putErrorSchema);\r",
							"pm.variables.set('deleteErrorSchema', deleteErrorSchema);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"code\": \"random string metot yaz\",\r\n  \"name\": \"3-6 karakter arası random string metot yaz\",\r\n  \"productGroupId\": \"guid Postman dinamik degisken kullan\",\r\n  \"BankAccount\": \"Postman dinamik degisken kullan\",\r\n  \"FinanceSource\":\"String içerisinde random int metod yaz\",\r\n  \"BirthDate\": \"1946-02-22T00:41:47 - bu formatta olacak şekilde random date metodunu yaz\",\r\n  \"financeType\": \"random 3-5 basamak arası int metot yaz\",\r\n  \"dateDifference\": \"random int psotman dinamik değişken kullan\",\r\n  \"isActive\": \"Boolean Postman dinamik degisken kullan\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/dgpays",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"dgpays"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{apiKey}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "x-api-key",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://787b4ca6-3ce1-4903-8150-90acc1c59914.mock.pstmn.io",
			"type": "string"
		},
		{
			"key": "apiKey",
			"value": "PMAK-6582d6899b15fc003ea9c134-84a857b8f12dddc5d90223f618aa801cfd",
			"type": "string"
		},
		{
			"key": "postId",
			"value": ""
		}
	]
}